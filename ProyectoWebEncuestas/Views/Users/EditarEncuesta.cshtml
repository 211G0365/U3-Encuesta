@{
    Layout = "_Layout";
}

<main class="crear-encuesta-wrapper">
    <h1 class="crear-encuesta-titulo">Editar Encuesta</h1>

    <form id="editSurveyForm" class="crear-encuesta-formulario">
        <label for="surveyName">Título de la encuesta</label>
        <input type="text" id="surveyName" name="surveyName" required />

        <div id="questionsContainer" class="contenedor-preguntas">
        </div>

        <div class="botones-opciones">
            <button type="button" onclick="addQuestion()">➕ Agregar Pregunta</button>
            <button type="submit" class="guardar">Editar</button>
            <button type="button" onclick="cancelar()" class="cancelar">Cancelar</button>
        </div>
    </form>
</main>

<script>
    let questionCount = 0;
    const maxQuestions = 10;
    const token = localStorage.getItem("token");

    function addQuestion(descripcion = "", numero = questionCount + 1, id = 0) {
        if (questionCount >= maxQuestions) {
            alert("Solo se permiten hasta 10 preguntas.");
            return;
        }

        questionCount++;

        const container = document.getElementById("questionsContainer");
        const div = document.createElement("div");
        div.className = "pregunta-item question-item";
        if (id) div.dataset.id = id;

        div.innerHTML = `
            ${id ? `<input type="hidden" name="questionIds[]" value="${id}" />` : ""}
            <input type="text" name="questions[]" placeholder="Pregunta..." value="${descripcion}" required />
            <input type="hidden" name="questionNumbers[]" value="${numero}" />
            <button type="button" onclick="eliminarPregunta(${id}, this)" style="background:#e53e3e;color:#fff;border-radius:6px;padding:8px;">ELIMINAR</button>
        `;

        container.appendChild(div);
    }

    async function eliminarPregunta(id, button) {
        if (!id || id === 0) {
            button.closest(".question-item").remove();
            questionCount--;
            return;
        }

        if (!confirm("¿Estás seguro de eliminar esta pregunta?")) return;

        try {
            const res = await fetch(`https://encuesta-api.websitos256.com/api/encuestas/preguntas/${id}`, {
                method: "DELETE",
                headers: { "Authorization": `Bearer ${token}` }
            });

            if (!res.ok) {
                const err = await res.text();
                alert(`Error al eliminar: ${err}`);
                return;
            }

            alert("Pregunta eliminada.");
            button.closest(".question-item").remove();
            questionCount--;
        } catch (e) {
            console.error("Error al eliminar pregunta:", e);
            alert("Error de red.");
        }
    }

    function cancelar() {
      
            window.history.back();
     
    }

    document.getElementById("editSurveyForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const params = new URLSearchParams(window.location.search);
        const id = params.get("id");

        const titulo = document.getElementById("surveyName").value;
        const descs = document.getElementsByName("questions[]");
        const nums = document.getElementsByName("questionNumbers[]");
        const ids = document.getElementsByName("questionIds[]");

        const preguntas = [];
        for (let i = 0; i < descs.length; i++) {
            preguntas.push({
                id: ids[i]?.value ? parseInt(ids[i].value) : 0,
                descripcion: descs[i].value,
                numeroPregunta: parseInt(nums[i].value)
            });
        }

        try {
            const payload = { titulo: titulo, preguntas: preguntas };
            const res = await fetch(`https://encuesta-api.websitos256.com/api/encuestas/${id}`, {
                method: "PUT",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            });

            if (!res.ok) throw new Error(await res.text());

            alert("Encuesta actualizada exitosamente.");
            window.location.href = "/Users/VerMisEncuestas";
        } catch (err) {
            alert("Error al actualizar encuesta: " + err.message);
        }
    });

    document.addEventListener("DOMContentLoaded", async function () {
        const params = new URLSearchParams(window.location.search);
        const id = params.get("id");

        if (!id || !token) {
            alert("Faltan datos para editar.");
            return window.location.href = "/Login";
        }

        try {
            const res = await fetch(`https://encuesta-api.websitos256.com/api/encuestas/con-preguntas/${id}`, {
                headers: { "Authorization": `Bearer ${token}` }
            });

            if (!res.ok) throw new Error(await res.text());

            const data = await res.json();
            document.getElementById("surveyName").value = data.titulo;

            data.pregunta.forEach(p => {
                addQuestion(p.descripcion, p.numeroPregunta, p.id);
            });

        } catch (err) {
            console.error("Error:", err);
            alert("Error al cargar la encuesta.");
            window.location.href = "/Users/VerMisEncuestas";
        }
    });
</script>

<style>
    body {
        background-color: #F9FAFB;
        font-family: 'Segoe UI', sans-serif;
    }

    .crear-encuesta-wrapper {
        max-width: 700px;
        margin: 60px auto;
        padding: 20px;
    }

    .crear-encuesta-titulo {
        font-size: 2rem;
        margin-bottom: 30px;
        color: #2D3748;
        text-align: left;
        font-weight: 600;
        border-bottom: 2px solid #E2E8F0;
        padding-bottom: 10px;
    }

    .crear-encuesta-formulario {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    label {
        font-weight: 600;
        color: #4A5568;
    }

    input[type="text"], input[type="number"] {
        padding: 12px;
        border: 1px solid #CBD5E0;
        border-radius: 6px;
        font-size: 1rem;
        width: 100%;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
    }

    input:focus {
        outline: none;
        border-color: #3182CE;
    }

    .contenedor-preguntas {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .pregunta-item {
        display: grid;
        grid-template-columns: 1fr 80px;
        gap: 10px;
        align-items: center;
    }

    .numero {
        text-align: center;
    }

    .botones-opciones {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        margin-top: 15px;
    }

        .botones-opciones button {
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .botones-opciones .guardar {
            background-color: #38A169;
            color: white;
        }

            .botones-opciones .guardar:hover {
                background-color: #2F855A;
            }

        .botones-opciones .cancelar {
            background-color: #E53E3E;
            color: white;
        }

            .botones-opciones .cancelar:hover {
                background-color: #C53030;
            }

        .botones-opciones button:not(.guardar):not(.cancelar) {
            background-color: #4299E1;
            color: white;
        }

            .botones-opciones button:not(.guardar):not(.cancelar):hover {
                background-color: #3182CE;
            }
</style>